# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram Job Parser Bot

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.utils.markdown import hbold, hlink, hcode
from aiogram.dispatcher.filters import Command
from datetime import datetime
import json
import os

from config import TELEGRAM_BOT_TOKEN, TARGET_CHAT_ID, SEARCH_QUERIES, PARSING_INTERVAL
from parser import JobParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π
job_parser = JobParser()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
SENT_JOBS_FILE = 'sent_jobs.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def load_sent_jobs():
    if os.path.exists(SENT_JOBS_FILE):
        try:
            with open(SENT_JOBS_FILE, 'r', encoding='utf-8') as f:
                return set(json.load(f))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
    return set()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ñ–∞–π–ª
def save_sent_jobs(sent_jobs):
    try:
        with open(SENT_JOBS_FILE, 'w', encoding='utf-8') as f:
            json.dump(list(sent_jobs), f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π. –Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ "
        f"—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª.\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        f"/parse - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π –≤—Ä—É—á–Ω—É—é\n"
        f"/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        f"üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ "
        f"–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª.\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        f"/parse - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π –≤—Ä—É—á–Ω—É—é\n"
        f"/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞\n\n"
        f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b> —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ config.py –∏ –≤–∫–ª—é—á–∞—é—Ç:\n"
        f"- –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
        f"- –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
        f"- –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π\n"
        f"- –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
@dp.message_handler(Command("status"))
async def cmd_status(message: types.Message):
    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n{hcode(', '.join(SEARCH_QUERIES))}\n\n"
        f"<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞:</b> {PARSING_INTERVAL // 60} –º–∏–Ω—É—Ç\n\n"
        f"<b>–¶–µ–ª–µ–≤–æ–π —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {TARGET_CHAT_ID}\n\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:</b> {len(load_sent_jobs())}\n\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse
@dp.message_handler(Command("parse"))
async def cmd_parse(message: types.Message):
    await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π...")
    
    try:
        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π
        jobs = await parse_jobs()
        
        if jobs:
            await message.answer(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(jobs)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        else:
            await message.answer("‚ÑπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /parse: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ HTML
def format_job_message(job):
    message = (
        f"üîç <b>{hbold(job['title'])}</b>\n\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {job['company']}\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {job['salary']}\n\n"
    )
    
    if job['description']:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
        description = job['description'][:200] + '...' if len(job['description']) > 200 else job['description']
        message += f"üìù {description}\n\n"
    
    message += (
        f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {job['source']}\n"
        f"üîé –ó–∞–ø—Ä–æ—Å: {job['query']}\n"
        f"üìÖ –î–∞—Ç–∞: {datetime.fromisoformat(job['timestamp']).strftime('%Y-%m-%d %H:%M')}\n\n"
    )
    
    if job['link']:
        message += f"üîó {hlink('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é', job['link'])}"
    
    return message

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π
async def parse_jobs():
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    sent_jobs = load_sent_jobs()
    new_jobs = []
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    for query in SEARCH_QUERIES:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.get_event_loop()
        jobs = await loop.run_in_executor(None, lambda: job_parser.parse_all_sites(query))
        
        for job in jobs:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
            job_id = f"{job['source']}_{job['link']}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
            if job_id not in sent_jobs:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π
                message = format_job_message(job)
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
                    await bot.send_message(chat_id=TARGET_CHAT_ID, text=message)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {job['title']} ({job['source']})")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
                    sent_jobs.add(job_id)
                    new_jobs.append(job)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                    await asyncio.sleep(0.5)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    save_sent_jobs(sent_jobs)
    
    return new_jobs

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π
async def scheduled_parsing():
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
            await parse_jobs()
            logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ {PARSING_INTERVAL // 60} –º–∏–Ω—É—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        
        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        await asyncio.sleep(PARSING_INTERVAL)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        asyncio.create_task(scheduled_parsing())
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –±–æ—Ç–∞
        await dp.start_polling()
    finally:
        await bot.session.close()

if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")